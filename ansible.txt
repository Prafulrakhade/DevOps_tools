Working on Ansible server
Application Deployent using ansible

Installation Command of Ansible on ubuntu 18.04


1. sudo su
2. sudo apt update
3. sudo apt upgrade
4. sudo apt install software-properties-common
5. sudo apt-add-repository --yes --update ppa:ansible/ansible
6. sudo apt install ansible
7. sudo apt install git
7. ansible --version


8. vi /etc/ansible/hosts
   in Ex.1 
   create group name
   and then paste private ips of the instances
   [frontend]
   10.0.3.172

   [backend]
   10.0.129.7
   :wq

9. vi /etc/ansible/ansible.cfg
   uncomment inventory and sudo-user
   :wq

10. ansible all --list-hosts
11. cd .ssh/
12. ls -la
13. nano id_rsa.pub
    and copy the public id.

14. go to otherr node or (i.e frontend) 
15. cd .ssh/
16. nano authorized_key
    and paste here public key

17. go to otherr node or (i.e backend)
18. cd .ssh/
19. ano authorized_key
    and paste here public key

20. again go to the ansible server and open authorized file
    i.e nano authorized_key and paste hera also public key

<for connection check>
21 ansible -m ping all
   press inter

22. ansible -m ping backend

23 ansible -m ping all

<now connection are set>

 start writing playbook for frontend
24. nano frontplaybook.yml

 
---
- name: frontend play
  hosts: frontend
  remote_user: root
  become: yes
  gather_facts: yes
  tasks:
    - name: install packages for the fundoo chat app
      action: apt name=nginx state=present
    - name: copy nginx configuration file for fundoo
      copy:
       src: /root/fundooapp.cfg
       dest: /etc/nginx/sites-available/fundooapp.cfg
    - name: restart service of nginx
      service:
       name: nginx
       state: started
    - name: for enabling the nginx
      file:
        src: /etc/nginx/sites-available/fundooapp.cfg
        dest: /etc/nginx/sites-enabled/default
        state: link
    - name: restart nginx
      service:
        name: nginx
        state: restarted
        
--------------------------------------------------------------------------------------------------

25. nano fundooapp config fle  (nano fundooapp.cfg)

server {
  listen 80;
  server_name <paste private ip of frontend > or frontend public ip
  location = /favicon.ico {access_log off; log_not_found off; }
  location /static/ { 
      root /root/new_chatapp/fundoo;
  }
  location / {
      include proxy_params;
      proxy_pass http://<paste backend private ip>:8000
  }
}


----------------------------------------------------------------------------------------------

26. ansible-playbook frontplaybook.yml

from step number 24 to 26 is for frontend server. Now we have to create playbook for backend server.

start writing playbook for backend 

27. nano bakendPlaybook.yml


---
- name: configure appserver
  hosts: backend
  remote_user: root
  become: yes
  gather_facts: yes
  tasks:
    - name: install python
      apt: name=python3 state=present
      apt: name=python3-pip state=present
      apt: name=python3-pip state=present
    - name: Install virtualenv python package
      pip:
        name: virtualenv
    - name: Clone a github repository
      git:
        repo: https://github.com/Prafulrakhade/new_chatapp_project.git
        dest: new_chatapp_project
        clone: yes
      register: repo_clone
      failed_when:
        - repo_clone.failed
        - not 'Local modifications exist in repository' in repo_clone.msg
    - name: creating the virtual environment venv
      command:
        cmd: virtualenv -p /usr/bin/python3 venv
        creates: /root/new_chatapp_project/venv
    - name: install python requirements in virtualenv
      pip:
        requirements: /root/new_chatapp_project/requirements.txt
        virtualenv: /root/new_chatapp_project/venv
        state: present
    - name: installing the package for database mysql
      action: apt name=default-libmysqlclient-dev state=present
    - name: install the package oof database
      action: apt name=libssl-dev state=present
    - name: install mysqlclient
      pip:
        name: mysqlclient
        virtualenv: /root/new_chatapp_project/venv
    - name: installing psycopg2-binary
      pip:
        name: psycopg2-binary
        virtualenv: /root/new_chatapp_project/venv
    - name: changing file ownership
      file:
        path: /root/new_chatapp_project/fundoo/manage.py
        mode: '777'
    - name: run cachetable on the application
      django_manage:
        command: createcachetable
        app_path: /root/new_chatapp_project/fundoo
        pythonpath: /root/new_chatapp_project/fundoo/fundoo
        virtualenv: /root/new_chatapp_project/venv
    - name: Running the migrate-command
      django_manage:
        command: migrate
        app_path: /root/new_chatapp_project/fundoo
        pythonpath: /root/new_chatapp_project/fundoo/fundoo
        virtualenv: /root/new_chatapp_project/venv
    - name: Copying gunicorn configurations to chatapp
      copy:
        src: /root/gunicorn.service
        dest: /etc/systemd/system/gunicorn.service
    - name: restart gunicorn srvice
      systemd:
        name: gunicorn
        daemon_reload: yes
        state: started
        enabled: yes
    - name: restart gunicorn service
      systemd:
        name: gunicorn
        state: restarted

------------------------------------------------------------------------------------------------------------------------------
28. create new gunicorn file name as 'gunicorn.service'


[Unit]
  Description=gunicorn daemon
  After=network.target
  [Service]
  User=root
  Group=www-data
  WorkingDirectory=/root/new_chatapp_project/fundoo
  ExecStart=/bin/bash -c 'source /root/new_chatapp_project/venv/bin/activate && gunicorn --bind 0.0.0.0:8000 fundoo.wsgi:application'
 [Install]
 WantedBy=multi-user.target

----------------------------------------------------------------------------------------------------------------------------------

29. ansible-playbook backendPlaybook.yml


----------------------end of the ansible 
------------------------------------------------------------------------------------------------------------
Ansible Commands :-

1. ansible -m ping all -----> check the connection between nodes
2. ansible all --list-hosts -----> showing all the nodes
3. ansible --version -----> check version
4. ansible backend[0] --list-hosts -----> checking the nodes in perticular group 
5. ansible backend[0:5] --list-hosts -----> checking the perticular nodes from 1 to 6
6. ansible-playbook frontplaybook.yml -----> run playbook



ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJdoBf1lcYs2ssPVKSJkvgk/yg3euFwMMJz0/RqqDRKXPZJJYebuKpGQ0P69xQsioD0sDLgy5oHOdZ8nTBZK3+2CSnE5oEyf3BLc9f8wz8vC3QBUNBoq4Z/WSYQXSYQYIdvOJUkmQ2+7bbGVAOxZtZ7kuIcSYtuzyJugIn3it+NGjIMfGse/m7ZcSl03H/5cvY1R/csSUEEMVikoE9mZRgLOemr8FWmGlBuHYD4SJePc+6C1VNMjMdS7TkTmngALm5yXLusDBj5A0ivJHEkrhP3tvyORozFWFO32TaLinNPsbmdQMyjOCK6STPdZTdSjWyITFgOGDLLp1hfdoqsPYz root@ip-10-0-11-190
